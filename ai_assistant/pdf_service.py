# ai_assistant/pdf_service.py

from fpdf import FPDF
from datetime import datetime
import pytz # Used for getting the correct timezone

class PDF(FPDF):
    def header(self):
        # --- Header with Logo and Title ---
        try:
            # Add the logo image. It's positioned 10mm from the left, 8mm from the top, and is 33mm wide.
            # The link points to your website, making the logo clickable.
            self.image('logo.png', 10, 8, 33, link='https://your-medibridge-website.com')
        except FileNotFoundError:
            print("Warning: logo.png not found. Skipping logo in PDF header.")
        
        # Set font for the title
        self.set_font('Arial', 'B', 20)
        # Move to the right of the logo
        self.cell(80) 
        # Main Title
        self.cell(30, 10, 'AI Health Assessment Report', 0, 1, 'C')
        # Line break
        self.ln(20)

    def footer(self):
        # --- Footer with Page Number and Disclaimer ---
        self.set_y(-20) # Position 2 cm from bottom
        # Draw a line above the footer
        self.set_draw_color(200, 200, 200) # Light gray line
        self.line(10, self.get_y(), 200, self.get_y())
        self.ln(5)

        # Set font for footer text
        self.set_font('Arial', 'I', 8)
        # Disclaimer text
        self.multi_cell(0, 5, 'This report is generated by an AI assistant and is intended for informational purposes only. It is not a substitute for professional medical advice, diagnosis, or treatment.', 0, 'C')
        # Page number
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

def create_summary_pdf(summary_text: str, session_id: str, user_id: str) -> bytes:
    """
    Creates a professional, well-formatted PDF document from a session summary.
    """
    pdf = PDF()
    pdf.add_page()
    
    # --- Metadata Information Box ---
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, 'Patient & Session Information', 0, 1)
    
    # Set colors for the info box
    pdf.set_fill_color(240, 240, 240) # Light gray background
    pdf.set_draw_color(200, 200, 200) # Light gray border
    pdf.set_line_width(0.3)

    # Get local timezone (Asia/Manila for Philippines)
    local_tz = pytz.timezone('Asia/Manila')
    report_time = datetime.now(local_tz).strftime('%Y-%m-%d %I:%M:%S %p %Z')

    # Create the two-column layout for metadata
    # Left column (labels)
    pdf.set_font('Arial', 'B', 11)
    pdf.cell(40, 8, 'Report Generated:', border=1, fill=True)
    pdf.set_font('Arial', '', 11)
    pdf.cell(0, 8, f" {report_time}", border=1, ln=1)
    
    pdf.set_font('Arial', 'B', 11)
    pdf.cell(40, 8, 'Patient ID:', border=1, fill=True)
    pdf.set_font('Arial', '', 11)
    pdf.cell(0, 8, f" {user_id}", border=1, ln=1)

    pdf.set_font('Arial', 'B', 11)
    pdf.cell(40, 8, 'Session ID:', border=1, fill=True)
    pdf.set_font('Arial', '', 11)
    pdf.cell(0, 8, f" {session_id}", border=1, ln=1)

    # Add space after the box
    pdf.ln(15)

    # --- Clinical Summary Section ---
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 10, 'Clinical Summary', 0, 1)
    # Draw a line below the title
    pdf.set_draw_color(59, 130, 246) # Blue color from your UI
    pdf.set_line_width(0.5)
    pdf.line(10, pdf.get_y(), 100, pdf.get_y())
    pdf.ln(5)

    # Add the summary body with intelligent formatting
    pdf.set_font('Arial', '', 12)
    # This logic checks for bullet points (asterisks) in the AI's response
    # and formats them nicely.
    lines = summary_text.split('\n')
    for line in lines:
        line = line.strip()
        if line.startswith('* '):
            # If it's a bullet point, indent it and add a bullet character
            pdf.ln(2) # Add a little space before the bullet
            pdf.cell(5) # Indent
            # chr(149) is the bullet point character
            pdf.multi_cell(0, 7, f'{chr(149)} {line[2:]}')
        else:
            # Otherwise, just render it as a normal paragraph
            pdf.multi_cell(0, 7, line)
            pdf.ln(2) # Add a little space after the paragraph
    
    # --- Generate the PDF in memory ---
    pdf_bytes = bytes(pdf.output())
    return pdf_bytes